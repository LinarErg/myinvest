
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СсылкаНаКартинку = ПолучитьНавигационнуюСсылку(Объект.Ссылка, "Картинка"); 
	ПолучитьИОтобразитьПоследнююЦену();
	ПолучитьИОтобразитьСреднююЦену();	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.КартинкаНавигационнаяСсылка) Тогда
        Если ТекущийОбъект.ЭтоНовый() Тогда
            ТекущаяСсылка = Справочники[ТекущийОбъект.Метаданные().Имя].ПолучитьСсылку();
            ТекущийОбъект.УстановитьСсылкуНового(ТекущаяСсылка);
        Иначе
            ТекущаяСсылка = ТекущийОбъект.Ссылка;
        КонецЕсли;
        ТекущийОбъект.КартинкаНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТекущаяСсылка, "Картинка");
    КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(СсылкаНаКартинку) Тогда
		ТекущийОбъект.Картинка = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СсылкаНаКартинку));
	ИначеЕсли Не ЗначениеЗаполнено(ТекущийОбъект.ИмяФайлаБезРасширения) Тогда
		ТекущийОбъект.Картинка = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьИОтобразитьПоследнююЦену()

	Если Объект.Биржа = Перечисления.Биржа.МОЕХ тогда
		ЗагрузкаСМосковскойБиржиСервер.ПолучитьИЗаписатьЦенуАктиваНаДату(Объект.Ссылка,ТекущаяДата());
	Иначе
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущаяЦенаАктиваСрезПоследних.Период КАК Период,
		|	ТекущаяЦенаАктиваСрезПоследних.Актив КАК Актив,
		|	ТекущаяЦенаАктиваСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ТекущаяЦенаАктива.СрезПоследних(&Период, Актив = &Актив) КАК ТекущаяЦенаАктиваСрезПоследних";
	
	Запрос.УстановитьПараметр("Актив", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Элементы.ТекущаяЦена.Заголовок = "Цена на " + Строка(ВыборкаДетальныеЗаписи.Период);
		ТекущаяЦена = ВыборкаДетальныеЗаписи.Цена;
	Иначе
		Элементы.ТекущаяЦена.Заголовок = "Цены не загружены";
		ТекущаяЦена = 0;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИОтобразитьСреднююЦену()

		
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьДанныеСБиржи(Команда)
	
	ПолучитьИОтобразитьПоследнююЦену();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинку(Команда)
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
	ПараметрыДиалога.МножественныйВыбор = Ложь;
	ПараметрыДиалога.Заголовок = НСтр("ru = 'Выберите файл'; en = 'Select file'");
   	//ПараметрыДиалога.Фильтр = НСтр("ru = 'Текстовый файл'; en = 'Text file'") + " (*.txt)|*.txt|";
	
    ЗавершениеОбратныйВызов 	= Новый ОписаниеОповещения("ЗавершениеОбратныйВызов", ЭтотОбъект);
    ПрогрессОбратныйВызов 		= Новый ОписаниеОповещения("ПрогрессОбратныйВызов", ЭтотОбъект);
    ПередНачаломОбратныйВызов 	= Новый ОписаниеОповещения("ПередНачаломОбратныйВызов", ЭтотОбъект);
    НачатьПомещениеФайлаНаСервер(ЗавершениеОбратныйВызов, ПрогрессОбратныйВызов, ПередНачаломОбратныйВызов,, ПараметрыДиалога, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбратныйВызов(ОписаниеПомещенногоФайла, ДополнительныеПараметры) Экспорт

	Если ОписаниеПомещенногоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Если Не ФайлКорректный(ОписаниеПомещенногоФайла.Адрес) Тогда
	//	ТекстСообщения = НСтр("ru = 'Файл пустой'; en = 'File is empty'");
	//	
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = ТекстСообщения;
	//	Сообщение.Сообщить(); 
	//	
	//	// ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	Возврат;
	//КонецЕсли;
	
	Объект.ИмяФайлаБезРасширения = ОписаниеПомещенногоФайла.СсылкаНаФайл.Файл.ИмяБезРасширения;
	Объект.РасширениеФайла = ОписаниеПомещенногоФайла.СсылкаНаФайл.Расширение;
	СсылкаНаКартинку = ОписаниеПомещенногоФайла.Адрес;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПрогрессОбратныйВызов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт

	ТекстСообщения = СтрШаблон(НСтр("ru = 'Загрузка файла %1'; en = 'Uploading file %1'"), ПомещаемыйФайл.Имя);
	РазмерФайла = СтрШаблон(Нстр("ru = 'Размер файла %1 байт'; en = 'File size %1 bytes'"), ПомещаемыйФайл.Размер());
	
	Состояние(ТекстСообщения, Помещено, РазмерФайла, БиблиотекаКартинок.Документ);

КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломОбратныйВызов(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт

	МегабайтВБайтах = 1000000;
	Если ПомещаемыйФайл.Размер() > МегабайтВБайтах Тогда
		ОтказОтПомещенияФайла = Истина;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Отказ. Загружаемый файл «%1» имеет размер более 1 мегабайта';
		|en = 'Failure. The uploaded file «%1» is larger than 1 megabyte'"), ПомещаемыйФайл.Имя);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		ОтказОтПомещенияФайла = Истина;
		
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, ОтказОтПомещенияФайла);
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Загрузка файла'; en = 'Uploading file'"),, ПомещаемыйФайл.Имя);
	КонецЕсли;  

КонецПроцедуры

&НаКлиенте
Процедура УдалитьКартинку(Команда)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьFIGIпоТикеру(Команда)
	
	Объект.figi = ИнтеграцияСТинькоффПоAPIСервер.ПолучитьFIGIпоТикеру(Объект.Тикер);
	
КонецПроцедуры





